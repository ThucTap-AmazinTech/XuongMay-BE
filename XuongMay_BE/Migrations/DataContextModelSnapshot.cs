// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XuongMay_BE.Data;

#nullable disable

namespace XuongMay_BE.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("XuongMay_BE.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Customer_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Total_amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("XuongMay_BE.Models.OrderDetail", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Order_ID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("XuongMay_BE.Models.ProductionLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Manage_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionLines");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Order_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Product_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionLineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductionLine_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("completion_rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("XuongMay_BE.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("XuongMay_BE.Models.User_Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Roles");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Order", b =>
                {
                    b.HasOne("XuongMay_BE.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("XuongMay_BE.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XuongMay_BE.Models.OrderDetail", b =>
                {
                    b.HasOne("XuongMay_BE.Models.Order", "Order")
                        .WithMany("OrderDetels")
                        .HasForeignKey("OrderId");

                    b.HasOne("XuongMay_BE.Models.Product", "Product")
                        .WithMany("OrderDetels")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Product", b =>
                {
                    b.HasOne("XuongMay_BE.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("XuongMay_BE.Models.ProductionLine", b =>
                {
                    b.HasOne("XuongMay_BE.Models.User", "User")
                        .WithMany("ProductionLines")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Task", b =>
                {
                    b.HasOne("XuongMay_BE.Models.Order", "Order")
                        .WithMany("Tasks")
                        .HasForeignKey("OrderId");

                    b.HasOne("XuongMay_BE.Models.Product", "Product")
                        .WithMany("Tasks")
                        .HasForeignKey("ProductId");

                    b.HasOne("XuongMay_BE.Models.ProductionLine", "ProductionLine")
                        .WithMany("Tasks")
                        .HasForeignKey("ProductionLineId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("XuongMay_BE.Models.User_Role", b =>
                {
                    b.HasOne("XuongMay_BE.Models.Role", "Role")
                        .WithMany("User_Role")
                        .HasForeignKey("RoleId");

                    b.HasOne("XuongMay_BE.Models.User", "User")
                        .WithMany("User_Role")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Order", b =>
                {
                    b.Navigation("OrderDetels");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Product", b =>
                {
                    b.Navigation("OrderDetels");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("XuongMay_BE.Models.ProductionLine", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("XuongMay_BE.Models.Role", b =>
                {
                    b.Navigation("User_Role");
                });

            modelBuilder.Entity("XuongMay_BE.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductionLines");

                    b.Navigation("User_Role");
                });
#pragma warning restore 612, 618
        }
    }
}
